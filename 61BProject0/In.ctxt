#BlueJ class context
comment0.params=
comment0.target=In()
comment0.text=\r\n\ Create\ an\ input\ stream\ from\ standard\ input.\r\n
comment1.params=socket
comment1.target=In(java.net.Socket)
comment1.text=\r\n\ Create\ an\ input\ stream\ from\ a\ socket.\r\n
comment10.params=
comment10.target=java.lang.String\ readLine()
comment10.text=\r\n\ Read\ and\ return\ the\ next\ line.\r\n
comment11.params=
comment11.target=char\ readChar()
comment11.text=\r\n\ Read\ and\ return\ the\ next\ character.\r\n
comment12.params=
comment12.target=java.lang.String\ readAll()
comment12.text=\r\n\ Read\ and\ return\ the\ remainder\ of\ the\ input\ as\ a\ string.\r\n
comment13.params=
comment13.target=java.lang.String\ readString()
comment13.text=\r\n\ Read\ and\ return\ the\ next\ string.\r\n
comment14.params=
comment14.target=int\ readInt()
comment14.text=\r\n\ Read\ and\ return\ the\ next\ int.\r\n
comment15.params=
comment15.target=double\ readDouble()
comment15.text=\r\n\ Read\ and\ return\ the\ next\ double.\r\n
comment16.params=
comment16.target=float\ readFloat()
comment16.text=\r\n\ Read\ and\ return\ the\ next\ float.\r\n
comment17.params=
comment17.target=long\ readLong()
comment17.text=\r\n\ Read\ and\ return\ the\ next\ long.\r\n
comment18.params=
comment18.target=short\ readShort()
comment18.text=\r\n\ Read\ and\ return\ the\ next\ short.\r\n
comment19.params=
comment19.target=byte\ readByte()
comment19.text=\r\n\ Read\ and\ return\ the\ next\ byte.\r\n
comment2.params=url
comment2.target=In(java.net.URL)
comment2.text=\r\n\ Create\ an\ input\ stream\ from\ a\ URL.\r\n
comment20.params=
comment20.target=boolean\ readBoolean()
comment20.text=\r\n\ Read\ and\ return\ the\ next\ boolean,\ allowing\ case-insensitive\r\n\ "true"\ or\ "1"\ for\ true,\ and\ "false"\ or\ "0"\ for\ false.\r\n
comment21.params=
comment21.target=java.lang.String[]\ readAllStrings()
comment21.text=\r\n\ Read\ all\ strings\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\r\n
comment22.params=
comment22.target=java.lang.String[]\ readAllLines()
comment22.text=\r\n\ Reads\ all\ remaining\ lines\ from\ input\ stream\ and\ returns\ them\ as\ an\ array\ of\ strings.\r\n\ @return\ all\ remaining\ lines\ on\ input\ stream,\ as\ an\ array\ of\ strings\r\n
comment23.params=
comment23.target=int[]\ readAllInts()
comment23.text=\r\n\ Read\ all\ ints\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\r\n
comment24.params=
comment24.target=double[]\ readAllDoubles()
comment24.text=\r\n\ Read\ all\ doubles\ until\ the\ end\ of\ input\ is\ reached,\ and\ return\ them.\r\n
comment25.params=
comment25.target=void\ close()
comment25.text=\r\n\ Close\ the\ input\ stream.\r\n
comment26.params=filename
comment26.target=int[]\ readInts(java.lang.String)
comment26.text=\r\n\ Reads\ all\ ints\ from\ a\ file\ \r\n\ @deprecated\ Clearer\ to\ use\ \r\n\ <tt>new\ In(filename)</tt>.{@link\ \#readAllInts()}\r\n
comment27.params=filename
comment27.target=double[]\ readDoubles(java.lang.String)
comment27.text=\r\n\ Reads\ all\ doubles\ from\ a\ file\r\n\ @deprecated\ Clearer\ to\ use\ \r\n\ <tt>new\ In(filename)</tt>.{@link\ \#readAllDoubles()}\r\n
comment28.params=filename
comment28.target=java.lang.String[]\ readStrings(java.lang.String)
comment28.text=\r\n\ Reads\ all\ strings\ from\ a\ file\r\n\ @deprecated\ Clearer\ to\ use\ \r\n\ <tt>new\ In(filename)</tt>.{@link\ \#readAllStrings()}\r\n
comment29.params=
comment29.target=int[]\ readInts()
comment29.text=\r\n\ Reads\ all\ ints\ from\ stdin\ \r\n\ @deprecated\ Clearer\ to\ use\ {@link\ StdIn\#readAllInts()}\r\n
comment3.params=file
comment3.target=In(java.io.File)
comment3.text=\r\n\ Create\ an\ input\ stream\ from\ a\ file.\r\n
comment30.params=
comment30.target=double[]\ readDoubles()
comment30.text=\r\n\ Reads\ all\ doubles\ from\ stdin\r\n\ @deprecated\ Clearer\ to\ use\ {@link\ StdIn\#readAllDoubles()}\r\n
comment31.params=
comment31.target=java.lang.String[]\ readStrings()
comment31.text=\r\n\ Reads\ all\ strings\ from\ stdin\r\n\ @deprecated\ Clearer\ to\ use\ {@link\ StdIn\#readAllStrings()}\r\n
comment32.params=args
comment32.target=void\ main(java.lang.String[])
comment32.text=\r\n\ Test\ client.\r\n
comment4.params=s
comment4.target=In(java.lang.String)
comment4.text=\r\n\ Create\ an\ input\ stream\ from\ a\ filename\ or\ web\ page\ name.\r\n
comment5.params=scanner
comment5.target=In(java.util.Scanner)
comment5.text=\r\n\ Create\ an\ input\ stream\ from\ a\ given\ Scanner\ source;\ use\ with\ \r\n\ <tt>new\ Scanner(String)</tt>\ to\ read\ from\ a\ string.\r\n\ <p>\r\n\ Note\ that\ this\ does\ not\ create\ a\ defensive\ copy,\ so\ the\r\n\ scanner\ will\ be\ mutated\ as\ you\ read\ on.\ \r\n
comment6.params=
comment6.target=boolean\ exists()
comment6.text=\r\n\ Does\ the\ input\ stream\ exist?\r\n
comment7.params=
comment7.target=boolean\ isEmpty()
comment7.text=\r\n\ Is\ the\ input\ empty\ (except\ possibly\ for\ whitespace)?\ Use\ this\r\n\ to\ know\ whether\ the\ next\ call\ to\ {@link\ \#readString()},\ \r\n\ {@link\ \#readDouble()},\ etc\ will\ succeed.\r\n
comment8.params=
comment8.target=boolean\ hasNextLine()
comment8.text=\r\n\ Does\ the\ input\ have\ a\ next\ line?\ Use\ this\ to\ know\ whether\ the\r\n\ next\ call\ to\ {@link\ \#readLine()}\ will\ succeed.\ <p>\ Functionally\r\n\ equivalent\ to\ {@link\ \#hasNextChar()}.\r\n
comment9.params=
comment9.target=boolean\ hasNextChar()
comment9.text=\r\n\ Is\ the\ input\ empty\ (including\ whitespace)?\ Use\ this\ to\ know\ \r\n\ whether\ the\ next\ call\ to\ {@link\ \#readChar()}\ will\ succeed.\ <p>\ Functionally\r\n\ equivalent\ to\ {@link\ \#hasNextLine()}.\r\n
numComments=33
